class Solution {
public:
    
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 0) return "";
        vector<vector<int>> dp(size);
        for(int i=0; i<size; i++) dp[i] = vector<int>(size);

        for(int i=0; i<size; i++) {
            for(int j=0; j<size; j++) {
                if(i == j) {
                    dp[i][j] = 1;
                } else if(j == i + 1) {
                    if(s[i] == s[j]) dp[i][j] = 1;
                }
            }
        }

        int len = 2;
        while(len < size) {
            for(int i=0; i<size; i++) {
                if(i + len < size) {
                    if(s[i] == s[i+len] && dp[i+1][i+len-1]) dp[i][i+len] = 1;
                }
            }
            len++;
        }

        // for(int i=0; i<size; i++) {
        //     for(int j=0; j<size; j++) {
        //         cout << dp[i][j] << " ";
        //     }
        //     cout << endl;
        // }

        int lmax = INT_MIN;
        int ll, rr;
        for(int i=0; i<size; i++) {
            for(int j=0; j<size; j++) {
                if(dp[i][j]) {
                    if(j - i + 1 > lmax) {
                        lmax = j-i+1;
                        ll=i;
                        rr=j;
                    }
                }
            }
        }

        return s.substr(ll, rr-ll+1);
    }
};